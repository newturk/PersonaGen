============================
PersonaGen Project File Structure & System Overview
============================

Root Directory:
---------------
project-bolt-sb1-kh5bgkmk/
├── backend/
│   ├── server.js
│   ├── package.json
│   ├── package-lock.json
│   ├── node_modules/
│   ├── uploads/
│   │   └── [uploaded PDFs]
├── project/
│   ├── package.json
│   ├── package-lock.json
│   ├── node_modules/
│   ├── src/
│   │   ├── App.tsx
│   │   ├── main.tsx
│   │   ├── index.css
│   │   ├── components/
│   │   │   └── [UI components]
│   │   ├── pages/
│   │   │   └── [Page components]
│   │   └── utils/
│   │       └── [Utility scripts]
│   ├── index.html
│   ├── tailwind.config.js
│   ├── postcss.config.js
│   ├── tsconfig.json
│   ├── tsconfig.app.json
│   ├── tsconfig.node.json
│   ├── vite.config.ts
│   ├── .gitignore
├── netlify/
│   └── functions/
├── prompt.txt
├── README.md
├── writeups.md


----------------------------
Directory & File Purpose
----------------------------

backend/
  - **server.js**: Main Node.js/Express backend server. Handles API endpoints for PDF upload, persona extraction, and chat. Integrates with Gemini AI and parses PDFs.
  - **package.json / package-lock.json**: Node.js dependency management for backend.
  - **node_modules/**: Installed backend dependencies.
  - **uploads/**: Stores uploaded PDF files temporarily for processing.

project/
  - **package.json / package-lock.json**: Node.js dependency management for frontend.
  - **node_modules/**: Installed frontend dependencies.
  - **src/**: All frontend source code.
    - **App.tsx**: Main React app component.
    - **main.tsx**: Entry point for React app.
    - **index.css**: Global styles (Tailwind, custom CSS).
    - **components/**: Reusable UI components (Navbar, PersonaAnalyzer, etc.).
    - **pages/**: Page-level React components (UploadPage, ChatPage, etc.).
    - **utils/**: Utility scripts for persona extraction, LLM integration, etc.
  - **index.html**: HTML template for the React app.
  - **tailwind.config.js / postcss.config.js**: Tailwind and PostCSS configuration.
  - **tsconfig*.json**: TypeScript configuration files.
  - **vite.config.ts**: Vite build tool configuration.
  - **.gitignore**: Files/folders to ignore in git.

netlify/
  - **functions/**: Placeholder for Netlify serverless functions (optional, not required for local dev).

prompt.txt
  - A detailed prompt for cloning and setting up the project.

README.md
  - Project overview, setup instructions, and usage guide.

writeups.md
  - Detailed article-style writeup about the project, how it was built, accomplishments, and lessons learned.


----------------------------
How the Project Works (End-to-End)
----------------------------

1. **Frontend (React/Vite):**
   - User visits the app in their browser (http://localhost:5173).
   - User uploads a PDF biography/autobiography via the Upload page.
   - The frontend sends the PDF to the backend via the `/upload_pdf` endpoint.
   - After processing, the frontend displays the extracted persona and allows the user to chat with it.

2. **Backend (Node.js/Express):**
   - Receives the PDF file, saves it to `uploads/`, and extracts the text using `pdf-parse`.
   - Sends the extracted text to Gemini AI with a prompt to extract persona data (traits, beliefs, style, etc.).
   - Normalizes the AI output and returns both the persona JSON and the full text to the frontend.
   - Handles chat requests by sending the persona profile, chat history, and full text to Gemini AI, returning persona-grounded responses.

3. **Gemini AI Integration:**
   - Used for both persona extraction (from PDF text) and for generating chat responses that reflect the persona's style and knowledge.

4. **Uploads Directory:**
   - Temporarily stores uploaded PDFs for processing. Files are deleted after processing to save space.

5. **Frontend-Backend Communication:**
   - All communication is via REST API endpoints (`/upload_pdf`, `/chat`, etc.), with CORS enabled for local development.

----------------------------
Summary
----------------------------
- The project is a modern, full-stack app for generating and chatting with digital personas from real documents.
- The backend is now 100% Node.js/Express (no Python).
- The frontend is a modern React/Vite/Tailwind app.
- All code, configuration, and documentation are organized for easy development, deployment, and collaboration. 